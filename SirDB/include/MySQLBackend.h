// /////////////////////////////////////////////////////////////////////
// Program: SirDB
// Version: 1.0
// File:    MySQLBackend.h
// Authors: Jordan Carlson (Caltech), Claudio Grandi (INFN BO)
// Date:    26/09/2004
// Note:
// /////////////////////////////////////////////////////////////////////

#ifndef MYSQL_BACKEND_H
#define MYSQL_BACKEND_H

#include <mysql.h>

#include "SirDBBackend.h"

#include "MySQLBackendContact.h"

/***** MySQLBackend *****/

class MySQLBackend : public SirDBBackend {
public:
  /* Use default connection parameters from the BOSS configuration file. */
  MySQLBackend(const std::string& config, const std::string& mode);

  ~MySQLBackend();

  /* Connect to the database (using previously established connection
     parameters). Return 0 on success. */
  int connect();

  /* Disconnect from the database. */
  void disconnect();

  /* Perform a general query, ignoring the results.
     Return 0 on success, negative if an error occurs. */
  int query(const std::string& q);

  /* Perform a SELECT (or similary) query and return the result set.
     If an error occurs, the result set evaluates to false. */
  SirDBResultSet fetch_query(const std::string& q);

  /* Perform a query and return the number of affected rows (for an INSERT-like
     query) or the number of rows in the result set (for a SELECT-like query).
     Return 0 if no rows were affected, negative if an error occurs. */
  int rowcount_query(const std::string& q);

  /* Perform an INSERT or UPDATE query, and return the unique ID generated by
     the AUTO_INCREMENT column.
     Return 0 if no rows are affected, negative if an error occurs. */
  int insert_query(const std::string& q);

  /* Escape the given string so that it can be inserted into the database. */
  std::string escape(std::string s);
  std::string escape(const char* s, size_t len);

  /* Return a string describing the last error encountered by the database.
     Return the empty string if there wasn't an error. */
  std::string errormsg();

private:
  MySQLBackendContact contact_;
  MYSQL* _mysql_handle;
};


/***** _ResultSetData *****/

class MySQL_ResultSetData : public SirDBResultSetData {
public:
  MySQL_ResultSetData(MYSQL_RES* mysql_res);
  ~MySQL_ResultSetData();

  const std::vector<std::vector<char*> >* getrows();
  const std::vector<char*>* getheaders();

private:
  MYSQL_RES* res;
  std::vector<std::vector<char*> > rows;
  std::vector<char*> headers;
};

#endif // MYSQL_BACKEND_H
